{
  "name": "Software Requirements Specification",
  "standardId": "IEEE 830-1998",
  "standardName": "IEEE Recommended Practice for Software Requirements Specifications",
  "abstract": "The content and qualities of a good software requirements specification (SRS) are described and several sample SRS outlines are presented. This recommended practice is aimed at specifying requirements of software to be developed but also can be applied to assist in the selection of in-house and commercial software products. Guidelines for compliance with IEEE/EIA 12207.1-1997 are also provided.",
  "keywords": "contract, customer, prototyping, software requirements specification, supplier, system requirements specifications",
  "sections": [
    {
      "name": "1. Introduction",
      "hint": "The introduction of the SRS should provide an overview of the entire SRS. It should contain the following subsections:\na) Purpose;\nb) Scope;\nc) Definitions, acronyms, and abbreviations;\nd) References;\ne) Overview."
    },
    {
      "name": "1.1. Purpose",
      "hint": "This subsection should\na) Delineate the purpose of the SRS;\nb) Specify the intended audience for the SRS."
    },
    {
      "name": "1.2. Scope",
      "hint": "This subsection should\na) Identify the software product(s) to be produced by name (e.g., Host DBMS, Report Generator, etc.);\nb) Explain what the software product(s) will, and, if necessary, will not do;\nc) Describe the application of the software being specified, including relevant benefits, objectives, and goals;\nd) Be consistent with similar statements in higher-level specifications (e.g., the system requirements specification), if they exist."
    },
    {
      "name": "1.3. Definitions, acronyms, and abbreviations",
      "hint": "This subsection should provide the definitions of all terms, acronyms, and abbreviations required to properly interpret the SRS. This information may be provided by reference to one or more appendixes in the SRS or by reference to other documents."
    },
    {
      "name": "1.4. References",
      "hint": "This subsection should\na) Provide a complete list of all documents referenced elsewhere in the SRS;\nb) Identify each document by title, report number (if applicable), date, and publishing organization;\nc) Specify the sources from which the references can be obtained.\nThis information may be provided by reference to an appendix or to another document."
    },
    {
      "name": "1.5. Overview",
      "hint": "This subsection should\na) Describe what the rest of the SRS contains;\nb) Explain how the SRS is organized."
    },
    {
      "name": "2. Overall description",
      "hint": "This section of the SRS should describe the general factors that affect the product and its requirements. This section does not state specific requirements. Instead, it provides a background for those requirements, which are defined in detail in Section 3 of the SRS, and makes them easier to understand.\nThis section usually consists of six subsections, as follows:\na) Product perspective;\nb) Product functions;\nc) User characteristics;\nd) Constraints;\ne) Assumptions and dependencies;\nf) Apportioning of requirements."
    },
    {
      "name": "2.1. Product perspective",
      "hint": "This subsection of the SRS should put the product into perspective with other related products. If the product is independent and totally self-contained, it should be so stated here. If the SRS defines a product that is a component of a larger system, as frequently occurs, then this subsection should relate the requirements of that larger system to functionality of the software and should identify interfaces between that system and the software.\nA block diagram showing the major components of the larger system, interconnections, and external interfaces can be helpful.\nThis subsection should also describe how the software operates inside various constraints. For example, these constraints could include\na) System interfaces;\nb) User interfaces;\nc) Hardware interfaces;\nd) Software interfaces;\ne) Communications interfaces;\nf) Memory;\ng) Operations;\nh) Site adaptation requirements."
    },
    {
      "name": "2.1.1. System interfaces",
      "hint": "This should list each system interface and identify the functionality of the software to accomplish the system requirement and the interface description to match the system."
    },
    {
      "name": "2.1.2. User interfaces",
      "hint": "This should specify the following:\na) The logical characteristics of each interface between the software product and its users. This includes those configuration characteristics (e.g., required screen formats, page or window layouts, content of any reports or menus, or availability of programmable function keys) necessary to accomplish the software requirements.\nb) All the aspects of optimizing the interface with the person who must use the system. This may simply comprise a list of do’s and don’ts on how the system will appear to the user. One example may be a requirement for the option of long or short error messages. Like all others, these requirements should be verifiable, e.g., “a clerk typist grade 4 can do function X in Z min after 1 h of training” rather than “a typist can do function X.” (This may also be specified in the Software System Attributes under a section titled Ease of Use.)"
    },
    {
      "name": "2.1.3. Hardware interfaces",
      "hint": "This should specify the logical characteristics of each interface between the software product and the hardware components of the system. This includes configuration characteristics (number of ports, instruction sets, etc.). It also covers such matters as what devices are to be supported, how they are to be supported, and protocols. For example, terminal support may specify full-screen support as opposed to line-by-line support."
    },
    {
      "name": "2.1.4. Software interfaces",
      "hint": "This should specify the use of other required software products (e.g., a data management system, an operating system, or a mathematical package), and interfaces with other application systems (e.g., the linkage between an accounts receivable system and a general ledger system). For each required software product, the following should be provided:\n— Name;\n— Mnemonic;\n— Specification number;\n— Version number;\n— Source.\nFor each interface, the following should be provided:\n— Discussion of the purpose of the interfacing software as related to this software product.\n— Definition of the interface in terms of message content and format. It is not necessary to detail any well-documented interface, but a reference to the document defining the interface is required."
    },
    {
      "name": "2.1.5. Communication interfaces",
      "hint": "This should specify the various interfaces to communications such as local network protocols, etc."
    },
    {
      "name": "2.1.6. Memory constraints",
      "hint": "This should specify any applicable characteristics and limits on primary and secondary memory."
    },
    {
      "name": "2.1.7. Operations",
      "hint": "This should specify the normal and special operations required by the user such as\na) The various modes of operations in the user organization (e.g., user-initiated operations);\nb) Periods of interactive operations and periods of unattended operations;\nc) Data processing support functions;\nd) Backup and recovery operations.\nNOTE—This is sometimes specified as part of the User Interfaces section."
    },
    {
      "name" : "2.1.8. Site adaptation requirements",
      "hint" : "This should\na) Define the requirements for any data or initialization sequences that are specific to a given site, mission, or operational mode (e.g., grid values, safety limits, etc.);\nb) Specify the site or mission-related features that should be modified to adapt the software to a particular installation."
    },
    {
      "name": "2.2. Product functions",
      "hint": "This subsection of the SRS should provide a summary of the major functions that the software will perform. For example, an SRS for an accounting program may use this part to address customer account maintenance, customer statement, and invoice preparation without mentioning the vast amount of detail that each of those functions requires.\nSometimes the function summary that is necessary for this part can be taken directly from the section of the higher-level specification (if one exists) that allocates particular functions to the software product. Note that for the sake of clarity\na) The functions should be organized in a way that makes the list of functions understandable to the customer or to anyone else reading the document for the first time.\nb) Textual or graphical methods can be used to show the different functions and their relationships. Such a diagram is not intended to show a design of a product, but simply shows the logical relationships among variables."
    },
    {
      "name": "2.3. User characteristics",
      "hint": "This subsection of the SRS should describe those general characteristics of the intended users of the product including educational level, experience, and technical expertise. It should not be used to state specific requirements, but rather should provide the reasons why certain specific requirements are later specified in Section 3 of the SRS."
    },
    {
      "name": "2.4. Constraints",
      "hint": "This subsection of the SRS should provide a general description of any other items that will limit the developer’s options. These include\na) Regulatory policies;\nb) Hardware limitations (e.g., signal timing requirements);\nc) Interfaces to other applications;\nd) Parallel operation;\ne) Audit functions;\nf) Control functions;\ng) Higher-order language requirements;\nh) Signal handshake protocols (e.g., XON-XOFF, ACK-NACK);\ni) Reliability requirements;\nj) Criticality of the application;\nk) Safety and security considerations."
    },
    {
      "name": "2.5. Assumptions and dependencies",
      "hint": "This subsection of the SRS should list each of the factors that affect the requirements stated in the SRS. These factors are not design constraints on the software but are, rather, any changes to them that can affect the requirements in the SRS. For example, an assumption may be that a specific operating system will be available on the hardware designated for the software product. If, in fact, the operating system is not available, the SRS would then have to change accordingly. "
    },
    {
      "name" : "2.6. Apportioning of requirements",
      "hint" : "This subsection of the SRS should identify requirements that may be delayed until future versions of the system."
    },
    {
      "name": "3. Specific requirements",
      "hint": "This section of the SRS should contain all of the software requirements to a level of detail sufficient to enable designers to design a system to satisfy those requirements, and testers to test that the system satisfies those requirements. Throughout this section, every stated requirement should be externally perceivable by users, operators, or other external systems. These requirements should include at a minimum a description of every input (stimulus) into the system, every output (response) from the system, and all functions performed by the system in response to an input or in support of an output. As this is often the largest and most important part of the SRS, the following principles apply:\na) Specific requirements should be stated in conformance with all the characteristics described in 4.3.\nb) Specific requirements should be cross-referenced to earlier documents that relate.\nc) All requirements should be uniquely identifiable.\nd) Careful attention should be given to organizing the requirements to maximize readability.\nBefore examining specific ways of organizing the requirements it is helpful to understand the various items that comprise requirements as described in 3.1 through 3.7."
    },
    {
      "name" : "3.1. External interfaces",
      "hint" : "This should be a detailed description of all inputs into and outputs from the software system. It should complement the interface descriptions in 5.2 and should not repeat information there.\nIt should include both content and format as follows:\na) Name of item;\nb) Description of purpose;\nc) Source of input or destination of output;\nd) Valid range, accuracy, and/or tolerance;\ne) Units of measure;\nf) Timing;\ng) Relationships to other inputs/outputs;\nh) Screen formats/organization;\ni) Window formats/organization;\nj) Data formats;\nk) Command formats;\nl) End messages."
    },
    {
      "name" : "3.2. Functions",
      "hint" : ""
    },
    {
      "name" : "3.3. Performance requirements",
      "hint" : ""
    },
    {
      "name" : "3.4. Logical database requirements",
      "hint" : ""
    },
    {
      "name" : "3.5. Design constraints",
      "hint" : ""
    },
    {
      "name" : "3.5.1. Standards compliance",
      "hint" : ""
    },
    {
      "name" : "3.6. Software system attributes",
      "hint" : ""
    },
    {
      "name" : "3.6.1. Reliability",
      "hint" : ""
    },
    {
      "name" : "3.6.2. Availability",
      "hint" : ""
    },
    {
      "name" : "3.6.3. Security",
      "hint" : ""
    },
    {
      "name" : "3.6.4. Maintainability",
      "hint" : ""
    },
    {
      "name" : "3.6.5. Portability",
      "hint" : ""
    },
    {
      "name" : "3.7. Organizing the specific requirements",
      "hint" : ""
    },
    {
      "name": "4. Appendices",
      "hint": "The appendixes are not always considered part of the actual SRS and are not always necessary. They may include\na) Sample input/output formats, descriptions of cost analysis studies, or results of user surveys;\nb) Supporting or background information that can help the readers of the SRS;\nc) A description of the problems to be solved by the software;\nd) Special packaging instructions for the code and the media to meet security, export, initial loading, or other requirements.\nWhen appendixes are included, the SRS should explicitly state whether or not the appendixes are to be considered part of the requirements."
    }
  ]
}